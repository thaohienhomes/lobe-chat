name: Deploy to Vercel (Prod)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    env:
      NEXT_TELEMETRY_DISABLED: 1
      NODE_OPTIONS: --max-old-space-size=7168
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      KEY_VAULTS_SECRET: ${{ secrets.KEY_VAULTS_SECRET }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      MIGRATE_ON_BUILD: ${{ secrets.MIGRATE_ON_BUILD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install deps (pnpm workspace via bun)
        run: bun install --frozen-lockfile

      - name: Type check
        run: bun run type-check

      - name: Tests (web)
        run: bunx vitest run --passWithNoTests --silent='passed-only' 'src/**/*.test.ts'

      - name: Tests (packages)
        run: bunx vitest run --passWithNoTests --silent='passed-only' 'packages/**/?(*.)+(spec|test).[jt]s?(x)'

      - name: Debug migration env
        run: |
          echo "NEXT_PUBLIC_SERVICE_MODE=$NEXT_PUBLIC_SERVICE_MODE"
          echo "DATABASE_DRIVER=$DATABASE_DRIVER"

      - name: Migrate database (Prod)
        if: ${{ env.MIGRATE_ON_BUILD == '1' && env.DATABASE_URL != '' }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          KEY_VAULTS_SECRET: ${{ secrets.KEY_VAULTS_SECRET }}
          NEXT_PUBLIC_SERVICE_MODE: server
          DATABASE_DRIVER: node
          MIGRATION_DB: "1"
        run: bun run db:migrate

      - name: Vercel Link (Production)
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_PROJECT_ID != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Linking to Vercel project: $VERCEL_PROJECT_ID"
          if [ -n "$VERCEL_ORG_ID" ]; then
            echo "Attempting to link with team scope: $VERCEL_ORG_ID"
            if ! bunx vercel@latest link --yes --token="$VERCEL_TOKEN" --scope="$VERCEL_ORG_ID" --project="$VERCEL_PROJECT_ID"; then
              echo "Team scope failed, retrying with personal scope..."
              bunx vercel@latest link --yes --token="$VERCEL_TOKEN" --project="$VERCEL_PROJECT_ID"
            fi
          else
            echo "Using personal scope"
            bunx vercel@latest link --yes --token="$VERCEL_TOKEN" --project="$VERCEL_PROJECT_ID"
          fi

      - name: Vercel Pull (Production)
        if: ${{ env.VERCEL_TOKEN != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Pulling Vercel project configuration..."
          bunx vercel@latest pull --yes --environment=production --token="$VERCEL_TOKEN"

      - name: Vercel Build
        if: ${{ env.VERCEL_TOKEN != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: bunx vercel@latest build --prod --token=$VERCEL_TOKEN

      - name: Vercel Deploy (Production)
        if: ${{ env.VERCEL_TOKEN != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Deploying to Vercel production..."
          bunx vercel@latest deploy --prebuilt --prod --token="$VERCEL_TOKEN"
